==============================================================================
Table of Contents                                                          *toc*

Config ··················································· |auto-session.config|
Commands ··············································· |auto-session.commands|
API ························································· |auto-session.api|

==============================================================================
Config                                                     *auto-session.config*

AutoSession.Config                                          *AutoSession.Config*

    Fields: ~
        {enabled?}       (boolean)
                                                                Saving / restoring
        {auto_save?}     (boolean)
        {auto_restore?}  (boolean)
        {auto_create?}   (boolean|fun():should_create_session)


SessionLens                                                        *SessionLens*

    Session Lens Config

    Fields: ~
        {picker?}  ()


SessionLensMappings                                        *SessionLensMappings*


    Fields: ~
        {delete_session?}     (table)
        {alternate_session?}  (table)
        {copy_session?}       (table)


SessionControl                                                  *SessionControl*


    Fields: ~
        {control_dir?}            (string)
        {control_filename?}       (string)
        {pre_save_cmds?}          (table)   executes before a session is saved

                                            Hooks
        {save_extra_cmds?}        (table)   executes before a session is saved
        {post_save_cmds?}         (table)   executes after a session is saved
        {pre_restore_cmds?}       (table)   executes before a session is restored
        {post_restore_cmds?}      (table)   executes after a session is restored
        {pre_delete_cmds?}        (table)   executes before a session is deleted
        {post_delete_cmds?}       (table)   executes after a session is deleted
        {no_restore_cmds?}        (table)   executes at VimEnter when no session is restored
        {pre_cwd_changed_cmds?}   (table)   executes before cwd is changed if cwd_change_handling is true
        {post_cwd_changed_cmds?}  (table)   executes after cwd is changed if cwd_change_handling is true


==============================================================================
Commands                                                 *auto-session.commands*

This plugin provides the following commands:

  `:SessionSave` - saves a session based on the `cwd` in `root_dir`
  `:SessionSave my_session` - saves a session called `my_session` in `root_dir`

  `:SessionRestore` - restores a session based on the `cwd` from `root_dir`
  `:SessionRestore my_session` - restores `my_session` from `root_dir`

  `:SessionDelete` - deletes a session based on the `cwd` from `root_dir`
  `:SessionDelete my_session` - deletes `my_session` from `root_dir`

  `:SessionDisableAutoSave` - disables autosave
  `:SessionDisableAutoSave!` - enables autosave (still does all checks in the config)
  `:SessionToggleAutoSave` - toggles autosave

  `:SessionPurgeOrphaned` - removes all orphaned sessions with no working directory left.

  `:SessionSearch` - opens a session picker, see Config.session_lens.picker

==============================================================================
API                                                           *auto-session.api*

AutoSession.setup({config})                                  *AutoSession.setup*
    Setup function for AutoSession

    Parameters: ~
        {config}  (AutoSession.Config|nil)  Config for auto session


AutoSession.session_exists_for_cwd()        *AutoSession.session_exists_for_cwd*
    Quickly checks if a session file exists for the current working directory.
    This is useful for starter plugins which don't want to display 'restore session'
    unless a session for the current working directory exists.

    Returns: ~
        (boolean)  if a session exists for the cwd


AutoSession.AutoSaveSession()                      *AutoSession.AutoSaveSession*
    AutoSaveSession
    Function called by auto_session to trigger auto_saving sessions, for example on VimExit events.

    Returns: ~
        (boolean)  if a session was saved


                                                *AutoSession.AutoRestoreSession*
AutoSession.AutoRestoreSession({session_name?}, {is_startup?})
    Function called by AutoSession when automatically restoring a session.

    Parameters: ~
        {session_name?}  (string)       An optional session to load
        {is_startup?}    (boolean|nil)  Is this autorestore happening on startup

    Returns: ~
        (boolean)  returns whether restoring the session was successful or not.


                                                       *AutoSession.SaveSession*
AutoSession.SaveSession({session_name?}, {show_message?})
    Saves a session to the dir specified in the config. If no optional
    session name is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_name?}  (string|nil)  Optional session name
        {show_message?}  (boolean)     Optional, whether to show a message on save (true by default)

    Returns: ~
        (boolean)


                                                  *AutoSession.SaveSessionToDir*
AutoSession.SaveSessionToDir({session_dir}, {session_name?}, {show_message?})
    Saves a session to the passed in directory. If no optional
    session name is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_dir}    (string)      Directory to write the session file to
        {session_name?}  (string|nil)  Optional session name
        {show_message?}  (boolean)     Optional, whether to show a message on save (true by default)

    Returns: ~
        (boolean)


RestoreOpts                                                        *RestoreOpts*

    Fields: ~
        {show_message}            (boolean|nil)  Should messages be shown
        {is_startup_autorestore}  (boolean|nil)  True if this is the the startup autorestore


                                                    *AutoSession.RestoreSession*
AutoSession.RestoreSession({session_name?}, {opts?})
    Restores a session from the passed in directory. If no optional session name
    is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_name?}  (string|nil)       Optional session name
        {opts?}          (RestoreOpts|nil)  restore options


                                             *AutoSession.RestoreSessionFromDir*
AutoSession.RestoreSessionFromDir({session_dir}, {session_name?}, {opts?})
    Restores a session from the passed in directory. If no optional session name
    is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_dir}    (string)           Directory to write the session file to
        {session_name?}  (string|nil)       Optional session name
        {opts?}          (RestoreOpts|nil)  restore options


                                                *AutoSession.RestoreSessionFile*
AutoSession.RestoreSessionFile({session_path}, {opts?})
    Restores a session from a specific file

    Parameters: ~
        {session_path}  (string)           The session file to load
        {opts?}         (RestoreOpts|nil)  restore options

    Returns: ~
        (boolean)  a session restored


                                                     *AutoSession.DeleteSession*
AutoSession.DeleteSession({session_name?})
    Deletes a session from the config session dir. If no optional session name
    is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_name?}  (string|nil)  Optional session name


                                              *AutoSession.DeleteSessionFromDir*
AutoSession.DeleteSessionFromDir({session_dir}, {session_name?})
    Deletes a session from the passed in directory. If no optional session
    name is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_dir}    (string)      Directory to delete the session from
        {session_name?}  (string|nil)  Optional session name


                                                 *AutoSession.DeleteSessionFile*
AutoSession.DeleteSessionFile({session_path}, {session_name})
    Delete a session file

    Parameters: ~
        {session_path}  (string)  The filename to delete
        {session_name}  (string)  Session name being deleted, just use to display messages

    Returns: ~
        (boolean)   Was the session file deleted


AutoSession.DisableAutoSave({enable?})             *AutoSession.DisableAutoSave*
    Disables autosave. Enables autosave if enable is true

    Parameters: ~
        {enable?}  (boolean)  Optional parameter to enable autosaving

    Returns: ~
        (boolean)   Whether autosaving is enabled or not


vim:tw=78:ts=8:noet:ft=help:norl:
